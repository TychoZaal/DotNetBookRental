// <auto-generated />
using System;
using BookRental.NET.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookRental.NET.Migrations
{
    [DbContext(typeof(BookRentalDbContext))]
    partial class BookRentalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookRental.NET.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "WTAdmin@WT.com",
                            IsAdmin = true,
                            Location = "Oostzaan",
                            Name = "Admin WT",
                            Password = "admin",
                            PhoneNumber = "1234",
                            StartingDate = new DateTime(2023, 4, 17, 13, 57, 10, 973, DateTimeKind.Local).AddTicks(4927),
                            Token = ""
                        },
                        new
                        {
                            Id = 2,
                            Email = "WTIntern@WT.com",
                            IsAdmin = false,
                            Location = "Groningen",
                            Name = "Intern WT",
                            Password = "intern",
                            PhoneNumber = "5678",
                            StartingDate = new DateTime(2023, 4, 17, 13, 57, 10, 973, DateTimeKind.Local).AddTicks(4965),
                            Token = ""
                        },
                        new
                        {
                            Id = 3,
                            Email = "Client@ClientCompany.com",
                            IsAdmin = false,
                            Location = "Amsterdam",
                            Name = "Client User",
                            Password = "client",
                            PhoneNumber = "password",
                            StartingDate = new DateTime(2023, 4, 17, 13, 57, 10, 973, DateTimeKind.Local).AddTicks(4968),
                            Token = ""
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
